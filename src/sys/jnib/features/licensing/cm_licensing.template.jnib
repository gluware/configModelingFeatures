// Copyright (C) 2020 Gluware - All Rights Reserved
// This feature package is provided as is with no implied warranties or fitness for a particular purpose.
// Gluware, Inc. will not provide maintenance, support, updates, enhancements or modifications.

featureParams : {
	
	// featureParams currently contains two fields: concept and portMap.
	//   • concept is that path to the featureConcept global. That's the CLI model for this customQos template feature.
	//   • portMap is the path to the abstraction map global. This is used to model all the interfaces involved in 
	//   the template in order to call/refer to them by name. That allows deploying the same feature across platform with a
	//   different port/interface layout. For instance, for a firewall using wan, lan and dmz as ports for the physical
	//   appliance vs port1, port2 and port3 for the virtual edition, the abstraction map can declare these three interfaces
	//   and calling them by name in the CLI under $context.intfs (for ex. $context.intfs.DATA or $context.intfs.ISP).
	
},

initFeature: function() {

	// TODO (optional): Add here the pre processing code for the cm_smartLicensing feature.
	// This function will be executed before the processFeature function will run. This function is useful when
	// conditional concept files need to be used. As a consequence, the concept file can be loaded dynamically. 
	// For instance, when vendor and/or hardware abstraction is required: 
	//   switch (node.vendor) {
	//     case "cisco":
	//       thisNib.featureParams.concept = "/org/instance/construct/global/featureConcept/qosFeatureConcept_for_Cisco.json"; 		
	//       break;
	//     case "juniper":
	//       thisNib.featureParams.concept = "/org/instance/construct/global/featureConcept/qosFeatureConcept_for_Juniper.json"; 		
	//       break;
	//   }

},

processFeature : function () {

	// TODO: Add here any additional process to add/modify/delete template values.
	// All the template values from the cm_smartLicensing feature UI form is available through thisNib.ref.
	// Every property within thisNib.ref is accessible using the $context prefix to "call" the value of that property
	// to be templated in the CLI template.
	// For instance, if thisNib.ref. contains a property called "prop1", the value is accessible using $context.prop1
	// This method is mandatory but adding into it is optional.

	if(!util.isEmpty(thisNib.ref.http.srcInt)) {
		if (!util.isEmpty(thisNib.ref.portMap)) {
			if (thisNib.ref.portMap[getGlobalInstanceName(thisNib.ref.http.srcInt)]) {
				thisNib.ref.http.srcInt = thisNib.ref.portMap[getGlobalInstanceName(thisNib.ref.http.srcInt)].name;
			} else {
				abort("The Source-interface (" + getGlobalInstanceName(thisNib.ref.http.srcInt) + ") selected in the Smart Licensing Feature does NOT exist in " + node.name + "'s portMap.");
			}
		} else {
			log.warning("A portMap is NOT present on this device's Assembly.")
		}
	} else {
		log.warning("A Source-interface is NOT selected in the Smart Licensing Feature.");
	}

	if (!util.isEmpty(thisNib.ref.dns.vrf)) {
		thisNib.ref.dns.vrf = " vrf " + getGlobalInstanceName(thisNib.ref.dns.vrf);
	}

},


_saveConfiguration : function() {

    var stop = false;
    var loop = 0, rsp;
    
    node.shell.writeRaw("write memory\n");
    
    while (!stop) {
        rsp = node.shell.getSendResponseStr(0.1);
        if (rsp.jmatch(/Overwrite the previous NVRAM configuration/)) {
            log.debug("Confirming NVRAM Configuation Migration");
            node.shell.writeRaw("\n");
            log.debug("Saving configuration");
            node.shell.writeRaw("\n");
        }
        else if (rsp.jmatch(/Building configuration/)) {
            log.debug("Saving configuration Started");
        }               
        if (rsp.jmatch(/OK/)) {
            log.debug("Configuration Saved");
            stop = true;
        }
        if (loop > 100) {
            log.warning("Unable to save configuration");
        }
        else {
            log.debug("Saving (" + loop + ")");
            wait(1);
            loop++;
        }
    }

},

_registerNode : function() {

	var rsp;

	node.shell.send("show license status", "show version");
	rsp = node.shell.getSendResponseStr();

	if (rsp.jmatch(/Status: UNREGISTERED/) || rsp.jmatch(/Smart Licensing Status: UNREGISTERED/) || rsp.jmatch(/Status: REGISTERING - REGISTRATION IN PROGRESS/) || rsp.jmatch(/Smart Licensing Status: REGISTERING - REGISTRATION IN PROGRESS/)) {
		// take care of the token
		if (node.options.previewMode.enabled) {
			log.debug(node.name + " is currently in Preview Mode. We will not try to register it to Smart Licensing at this time.");
		} else {
			log.debug("This device is unregistered to Cisco's Smart Licensing. Attempting to register...")
			node.shell.send("license smart register idtoken " + thisNib.ref.license.token);
		}
		var stop = false;
		var loop = 0, rsp;

		while (!stop) {
			node.shell.send("show license status");
			rsp = node.shell.getSendResponseStr();
			if (rsp.jmatch(/Status: REGISTERED/)) {
				var owner = rsp.jmatch(/Smart Account: .+/);
				var virtualAccount = rsp.jmatch(/Virtual Account: .+/);
				var initialReg = rsp.jmatch(/Initial Registration: .+/);
				var lastRenewal = rsp.jmatch(/Last Renewal Attempt: .+/);
				var nextRenewal = rsp.jmatch(/Next Renewal Attempt: .+/);
				var expiration = rsp.jmatch(/Registration Expires: .+/);
				
				log.info(node.name + " is now registered to Cisco's Smart Licensing.");
				log.info("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
				log.info("!!!!!     " + owner);
				log.info("!!!!!     " + virtualAccount);
				log.info("!!!!!     " + initialReg);
				log.info("!!!!!     " + lastRenewal);
				log.info("!!!!!     " + nextRenewal);
				log.info("!!!!!     " + expiration);
				log.info("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

				wait(2);
				// save configuration
				thisNib._saveConfiguration();

				stop = true;
				break;
			} else if (rsp.jmatch(/Status: REGISTERING - REGISTRATION IN PROGRESS/)) {
				log.debug("The Smart Licensing registration for " + node.name + " is in progress.");
			}
			if (loop > 10) {
				log.debug("Smart licensing Feature has reached the maximum number of attempts to register. Exiting...")
				stop = true;
			} else {
				if (node.options.previewMode.enabled) {
					stop = true;
					break;
				} else {
					log.debug("Trying to register... (" + loop + ")");
					wait(10);
					loop++;
				}
			}
		}
	} else {
		// nothing to do here
		var owner = rsp.jmatch(/Smart Account: .+/);
		var virtualAccount = rsp.jmatch(/Virtual Account: .+/);
		var initialReg = rsp.jmatch(/Initial Registration: .+/);
		var lastRenewal = rsp.jmatch(/Last Renewal Attempt: .+/);
		var nextRenewal = rsp.jmatch(/Next Renewal Attempt: .+/);
		var expiration = rsp.jmatch(/Registration Expires: .+/);

		log.info(node.name +" is already registered to Cisco's Smart Licensing.");
		log.info("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
		log.info("!!!!!     " + owner);
		log.info("!!!!!     " + virtualAccount);
		log.info("!!!!!     " + initialReg);
		log.info("!!!!!     " + lastRenewal);
		log.info("!!!!!     " + nextRenewal);
		log.info("!!!!!     " + expiration);
		log.info("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
	}
	if (!node.shell.isClosed()) {
		log.debug("Exiting...");
		node.shell.disconnect();
	}
},

postProcess : function () {

	// TODO (optional): Add here the post processing code for the cm_smartLicensing feature.
	// This function will be executed after the FSE has finished rendering all the objects in the node object store.
	// This is an optional feature that is useful if the feature required handling of additional commands once the CLI
	// configuration has been sent to the target node (for instance, enrolling a certificate once the trustpoint has
	// been configured). This method is optional.
	//
	// Quick reminder of the shell commands available:
	//   • connect() triggers the connection to the node (requires a valid entryConnection property in the node object).
	//   • disconnect() kills the connection to the node.
	//   • send() sends one or more CLI commands to the node followed by a CR/LF and tracks the prompt (when tracking is available).
	//   • write() behaves like send() without the prompt tracking.
	//   • writeRaw() sends one or more set of characters/CLI commands to the node (no CR or LF). 
	//   • getSendResponseStr() is the method that gets the CLI response.
	//   • getSendResponseMatch() is the equivalent that is mapped to a regex match.
	//   • setResponseInactivityTimeout() defines the inactivity timer the engine will wait the node response.
	//   • registerResponseInactivity(<function>, args…) calls the <function> when the inactivity timer has been triggered.
	//   • registerConnectSuccess(<function>, args…) calls the <function> when the connection with the node is successful.
	//   • isClosed() returns "true" if the connection to the node is closed; "false" otherwise.
	//   • discard() purges the connection object (required for reestablishing a connection to a node).
	

	if (node.shell === undefined) {
		log.debug("We cannot detect an active connection. Exiting...");
	} else {
		thisNib._registerNode();
	}
},

deleteNode: function() {

	// TODO (optional): Add here all the processing required when the node is being deleted such as cleaning up some data 
	// in the attached storage or similar. This method is optional.

},
 
unprovision: function() {

	// TODO (optional): Add here all the processing required when the feature is being removed from the node assembly.
	// If you want the feature to become unmanaged (in other words, you want the associated CLI to be kept in the node
	// but no longer handled by gluware, then remove the unprovision() call. However, if you want the feature to be
	// also removed from the target node, then this is why the unprovision() call has been designed for. 
	// Remember that the rendering is always called after the expert code and the FSE will look into the node object
	// store to see what objects needs to be rendered. If the object store is empty (because you don't do anything
	// in the unprovision() method, and because the FSE works with a declarative approach, all the objects following
	// the naming convention (and associated CLI commands) will be removed from the target node. 
	// This method is optional.
  
      
},
 
preview: function() {
      
	// TODO (optional): Add here all the processing required when you want to make visible an output when the preview action
	// is called. This method is optional.
	
	
}

